# 不随环境改变的配置项
#
spring.application.name=SpringBootWebDemo
#
# 测试读取配置文件，引用其他配置文件的值。
# 只要通过@PropertySource引入了的配置文件都可以读取，不论是否在application.properties中存在引用。
app.test.read.value=${app.test.other.read.value}
#
# 邮件相关
spring.mail.test-connection=true
#
# 配置文件选择，active: @maven的pom中profiles/profile/properties/自定义节点名@，与maven联动
spring.profiles.active=@profile-choose@
#
# spring-cache缓存，使用redis
spring.cache.type=redis
# spring-cache缓存过期时间（毫秒），全局统一
spring.cache.redis.time-to-live=21600000
# key使用前缀吗
spring.cache.redis.use-key-prefix=true
# spring-cache前缀。key会默认以 前缀+cacheName::key 存在，可在配置类中自定义
spring.cache.redis.key-prefix=sbwd
# 缓存null值的字段吗
spring.cache.redis.cache-null-values=false
#
# redis数据库
spring.redis.timeout=2000s
spring.redis.client-type=lettuce
spring.redis.lettuce.pool.max-wait=60s
spring.redis.lettuce.pool.max-idle=10
spring.redis.lettuce.pool.min-idle=10
spring.redis.lettuce.pool.max-active=8
# Redis数据库索引（默认为0）
spring.redis.database=10
#
# 多数据源
spring.datasource.dynamic.primary=master
spring.datasource.dynamic.strict=false
# 主源，名为master
spring.datasource.dynamic.datasource.master.url=jdbc:mysql://${app.datasource.read.url}/${app.datasource.read.dbname}?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false
# p6spy sql性能分析
#spring.datasource.dynamic.datasource.master.url=jdbc:p6spy:mysql://${app.datasource.read.url}/${app.datasource.read.dbname}?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false
spring.datasource.dynamic.datasource.master.username=${app.datasource.read.username}
spring.datasource.dynamic.datasource.master.password=${app.datasource.read.password}
spring.datasource.dynamic.datasource.master.driver-class-name=org.mariadb.jdbc.Driver
# p6spy sql性能分析
#spring.datasource.dynamic.datasource.master.driver-class-name=com.p6spy.engine.spy.P6SpyDriver
spring.datasource.dynamic.datasource.master.type=com.alibaba.druid.pool.DruidDataSource
# 其他源，名称自定义
spring.datasource.dynamic.datasource.write.url=jdbc:mysql://${app.datasource.write.url}/${app.datasource.write.dbname}?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false
# p6spy sql性能分析
#spring.datasource.dynamic.datasource.write.url=jdbc:p6spy:mysql://${app.datasource.read.url}/${app.datasource.read.dbname}?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false
spring.datasource.dynamic.datasource.write.username=${app.datasource.write.username}
spring.datasource.dynamic.datasource.write.password=${app.datasource.write.password}
spring.datasource.dynamic.datasource.write.driver-class-name=org.mariadb.jdbc.Driver
# p6spy sql性能分析
#spring.datasource.dynamic.datasource.write.driver-class-name=com.p6spy.engine.spy.P6SpyDriver
spring.datasource.dynamic.datasource.write.type=com.alibaba.druid.pool.DruidDataSource
# druid连接池
# 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
# 此处设置spring.datasource.druid.test-while-idle无效，用dynamic包的
spring.datasource.dynamic.druid.test-while-idle=false
spring.datasource.dynamic.druid.time-between-eviction-runs-millis=600000
#spring.datasource.dynamic.druid.validation-query="SELECT 1"
# 开启以下俩会降低性能
spring.datasource.dynamic.druid.test-on-borrow=false
spring.datasource.dynamic.druid.test-on-return=false
spring.datasource.dynamic.druid.filters=stat,log4j2,wall
spring.datasource.dynamic.druid.initial-size=2
spring.datasource.dynamic.druid.min-idle=2
spring.datasource.dynamic.druid.max-active=10
spring.datasource.druid.web-stat-filter.enabled=true
spring.datasource.druid.web-stat-filter.url-pattern=/*
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.bmp,*.svg,*.png,*.css,*.ico,/druid/*
spring.datasource.druid.stat-view-servlet.enabled=true
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
spring.datasource.druid.stat-view-servlet.login-username=root
spring.datasource.druid.stat-view-servlet.login-password=123456
spring.datasource.druid.stat-view-servlet.allow=127.0.0.1
#
# spring-jms异步消息，使用activemq5
# 发布订阅模式
spring.jms.pub-sub-domain=true
# 开启客户端调用acknowledge手动确认消息，防止日志一直打印 Transaction Commit :null，需要同时关闭事务，改为配置类配置，失败
#spring.jms.listener.acknowledge-mode=client
# 使用外部按照的activemq而不使用自带实例
spring.activemq.in-memory=false
# 信任所有包
spring.activemq.packages.trust-all=true
# 配置spring.activemq.pool开启会报找不到ActiveMqConnectionFactory，需要引入org.messaginghub:pooled-jms，测试没用
#
# mybatisplus
# 全局逻辑删除的实体字段名(since 3.3.0后可不加注解)
mybatis-plus.global-config.db-config.logic-delete-field=is_deleted
# 逻辑已删除值(默认为 1)
mybatis-plus.global-config.db-config.logic-delete-value=true
# 逻辑未删除值(默认为 0)
mybatis-plus.global-config.db-config.logic-not-delete-value=false
# 向控制台打印sql执行日志
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
# 如果需要同时写入日志文件的话
#logging.level.com.baomidou.mybatisplus=DEBUG
#logging.level.com.example.springbootwebdemo.demo.mapper=DEBUG
#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.slf4j.Slf4jImpl
#
# 缓存中转，批量存库的缓存key
cache.batch.db.log.key=sbwd-logs
cache.batch.db.log.open=true
#
# 日志记录异常字段长度
exception.db-length=2000
#
# jasypt加密配置文件的盐值，加密字符串需运行com.example.springbootwebdemo.EncryptSettingFile::encrypt方法生成
jasypt.encryptor.password=${SBWD_PASS:null}
# 3.0版后更换了加密算法，需配置如下，不然报错配置文件中某项无法绑定为字符串
jasypt.encryptor.algorithm=PBEWithMD5AndDES
jasypt.encryptor.iv-generator-classname=org.jasypt.iv.NoIvGenerator
#
# p6spy sql性能分析
# 开启日志记录
#decorator.datasource.p6spy.enable-logging=true
# 文件方式记录日志
#decorator.datasource.p6spy.logging=slf4j
# 日志文件
#decorator.datasource.p6spy.log-file=sql-slow.log
# 自定义的日志数据格式
#decorator.datasource.p6spy.log-format=-%(currentTime)|%(executionTime)|%(category)|%(sql)
#
# 配置自定义静态文件的位置，需加上spring boot默认的路径，这样上传的文件虽处于服务器外，但也可以被http请求访问
spring.web.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:${spring.profiles.active}
#